#*****************************************
# Create a data frame with 3 variables | classId | keyword | class frequency |
ClassFreqDF<-aggregate(freq~path+keyterm,data=clsTree,sum)
# Filter low frequency term if necessary
# ClassFreqDF<- ClassFreqDF[ClassFreqDF$freq>100,]
#*****************************************
# Build a Class Frequency Matrix
# Convert to wide format
ClassFreq<-dcast(ClassFreqDF,path~keyterm,value.var="freq",fill=0)
ClassFreqMatrix <- as.matrix(ClassFreq)
rownames(ClassFreq)<-ClassFreq[,1]
ClassFreq <- ClassFreq[,-1]
# Move class ID to rownames
# 3.Load up test data for evaluation
#*****************************************
# This function will return a matrix of document-term
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/loadTestData.R")
rownames(tmp)<-tmp$patId
tmp$patId <- NULL
InvertedClassMatrix <- log(nrow(ClassFreqMatrix)/colSums(TermClassMatrix>0))
InvertedClassMatrix <- log(nrow(ClassFreqMatrix)/colSums(ClassFreqMatrix>0))
dim(InvertedClassMatrix)
class(InvertedClassMatrix)
InvertedClassMatrix[1:3,1:3]
head(InvertedClassMatrix)
nrow(InvertedClassMatrix) == nrow(ClassFreqMatrix)
nrow(InvertedClassMatrix)
ClassFreqMatrix
b<-colSums(ClassFreqMatrix)
b<-colSums(ClassFreqMatrix>0)
head(backsolve())
head(b)
InvertedClassMatrix <- InvertedClassMatrix[-1]
head(InvertedClassMatrix)
final<-t(ClassFreqMatrix)*t(InvertedClassMatrix)
dim(ClassFreqMatrix)
ClassFreqDF<-aggregate(freq~path+keyterm,data=clsTree,sum)
# Filter low frequency term if necessary
# ClassFreqDF<- ClassFreqDF[ClassFreqDF$freq>100,]
# Convert to wide format
ClassFreq<-dcast(ClassFreqDF,path~keyterm,value.var="freq",fill=0)
# Move class ID to rownames
rownames(ClassFreq)<-ClassFreq[,1]
ClassFreq <- ClassFreq[,-1]
# Build a Class Frequency Matrix
ClassFreqMatrix <- as.matrix(ClassFreq)
#*****************************************
dim(ClassFreqMatrix)
InvertedClassMatrix <- log(nrow(ClassFreqMatrix)/colSums(ClassFreqMatrix>0))
final<-t(ClassFreqMatrix)*InvertedClassMatrix
library("stringr")
keywords<-unique(rownames(final))
kw<-colnames(tmp)
and<- intersect(kw,keywords)
# Calculate Class Length |c| by first double each element in cell
# Calculating total frequency and taking square root
# final frame has the format:
#      | cls1 | cls2 | cls3 |
# ---------------------------
# w1   | 1    |  2   |  3   |
# w2   | 2    |  4   |  6   |
#      | cls1 | cls2 | cls3 |
# After applying the power of 2 function:
# ---------------------------
# w1   | 1    |  4   |  9   |
# w2   | 4    | 16   | 36   |
# After applying colSums, we have total frequency for each class
# cls1 = 5, cls2 = 20, cls3 = 45
clsLen<-sqrt(colSums(apply(final,2,function(x)x**2)))
# A. Compute the nominator: D.c
qMatrix<-as.matrix(tmp[,and])
clsMatrix <- final[and,]
# qmatrix shape:
#     | w1 | w2 | w3 |
# d2  | 2  | 3  | 1  |
#---------------------
# d1  | 1  | 2  | 3  |
# clsMatrix Shape:
#      | cls1 | cls2 | cls3 |
# ---------------------------
# w1   | 1    |  4   |  9   |
# w2   | 4    | 16   | 36   |
# After multiplication, each cell hold the dot product of a document with a list of class
nominator <- qMatrix %*% clsMatrix
# Calculate doc length for each document
# docLen shape:
#     | w1 | w2 | w3 |
#---------------------
# d1  | 1  | 2  | 3  |
# d2  | 2  | 3  | 1  |
# After calculating sums:
# d1 = 6, d2 = 6
# total frequency for docLen
docLen<-sqrt(rowSums(apply(tmp,2,function(x)x**2)))
# Each word is now a unit vector, we can calculate
# B. Compute the denominator: | docLen | * | clsLen |
# Because we want each docLen to multiply with each class.
# In order to multiply vector docLen and vector clsLen
# We first fill data with clsLen value . Thus t matrix between
# class and test document:
#         | d1 | d2 | d3 | d4 ...
#---------------------------------
# cls 1   | a  | a  | a  | a
# cls 2   | b  | b  | b  | b
t<-matrix(data = clsLen, nrow = length(clsLen), ncol=length(docLen), byrow=FALSE)
# Create a diagonal of docLen
# docLen_diag is:
#      | d1 | d2 | d3 |...
#-------------------------
# d1   | 1  | 0  |  0 |
# d2   | 0  | 4  |  0 |
# d3   | 0  | 0  |  2 |
# The reason when we create a diag is that when we multiply
# t-matrix to diag, we have the particular clsLen * docLen
# for each cell
denominator <- t %*% diag(docLen)
rownames(denominator)<-names(clsLen)
colnames(denominator)<-names(docLen)
# C. Calculate final score
# Our denominator is now in form of
#        | d1 | d2 | d3 |...
#-------------------------
# cls1   | 1  | 2  |  1 |
# cls2   | 4  | 4  |  5 |
# cls3   | 3  | 2  |  2 |
# Where each cell store the |docLen| * |clsLen|
# While our nominator is in form of
#      | cls1 | cls2 | cls3 |...
#----------------------------
# d1   | 1    | 2    |  1   |
# d2   | 4    | 4    |  5   |
# d3   | 3    | 2    |  2   |
# Where each cell store the D.c
# We perform bitwise division
s<-nominator/t(denominator)
length(which(apply(s,1,function(x)max(x))==s[,"345173"],TRUE))
doc_test_pred<-apply(s,1,function(x) names(which.max(x)))
table(doc_test_pred)
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/dbConnect.R")
#*****************************************
# 2.Build Class Frequency Matrix
#*****************************************
# Create a data frame with 3 variables | classId | keyword | class frequency |
ClassFreqDF<-aggregate(freq~path+keyterm,data=clsTree,sum)
# Filter low frequency term if necessary
# ClassFreqDF<- ClassFreqDF[ClassFreqDF$freq>100,]
# Convert to wide format
ClassFreq<-dcast(ClassFreqDF,path~keyterm,value.var="freq",fill=0)
# Move class ID to rownames
rownames(ClassFreq)<-ClassFreq[,1]
ClassFreq <- ClassFreq[,-1]
# Build a Class Frequency Matrix
ClassFreqMatrix <- as.matrix(ClassFreq)
dim(ClassFreqMatrix)
#*****************************************
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/loadTestData.R")
rownames(tmp)<-tmp$patId
InvertedClassMatrix <- log(nrow(ClassFreqMatrix)/colSums(ClassFreqMatrix>0))
# Inverted Class matrix is a vector of keywords with its
# classbonus value
final<-t(ClassFreqMatrix)*InvertedClassMatrix
dmelt_class<-melt(final)
names(dmelt_class) <- c("keyterm","Id","freq")
dmelt_tmp<- melt(tmp,id.vars = c("patId"))
names(dmelt_tmp) <- c("Id","keyterm","freq")
mdata <- rbind(dmelt_tmp,dmelt_class)
# Convert back to wide
wide_dat <- dcast(mdata, Id ~ keyterm, value.var = "freq", fill=0)
# Extract test doc and train doc
test <- wide_dat[1:nrow(tmp),]
train <- wide_dat[(nrow(tmp)+1):nrow(wide_dat),]
rownames(train)<-train[,c("Id")]
train<-train[,-1]
train_mat <- as.matrix(train)
selected_class<-c()
for(i in seq(1,nrow(test))){
# For each vector d, we compute the eucline distance with our training set
print(i)
tmat <- as.numeric(test[i,-1])
distance <- t(t(train_mat)-tmat)
# Take exponential of each column
distance <- apply(distance,2,function(x)x**2)
# Get squareroot of sum
selected_class <- c(selected_class,names(which.min(sqrt(rowSums(distance)))))
print(tail(selected_class,1))
}
table(selected_class)
rownames(ClassFreqMatrix)
cls7032<-ClassFreqMatrix[18,]
cls7032<-ClassFreqMatrix[18,]>0
cls7032<-cls7032>0
length(cls7032)
haed(cls7032)
head(cls7032)
cls7032<-(cls7032>0)==TRUE
cls7032<-ClassFreqMatrix[18,]
head(cls7032)
head(cls7032>0)
head(cls7032[,cls7032!=0])
head(cls7032[cls7032!=0])
cls7032<-cls7032[cls7032!=0]
table(selected_class)
rownames(ClassFreqMatrix)
cls606200<-ClassFreqMatrix[15,]
cls606200<-cls606200[cls606200!=0]
sum(cls606200)
sum(cls7032)
names(cls606200)
intersect(InvertedClassMatrix)
intersect(InvertedClassMatrix,names(cls606200))
intersect(colnames(InvertedClassMatrix),names(cls606200))
InvertedClassMatrix[,names(cls606200)]
colnames(InvertedClassMatrix)
names(InvertedClassMatrix)
InvertedClassMatrix[names(cls606200)]
sum(InvertedClassMatrix[names(cls606200)])
sum(InvertedClassMatrix[names(cls7032)])
InvertedClassMatrix[-names(cls606200)]
sorted(InvertedClassMatrix[names(cls606200)])
sort(InvertedClassMatrix[names(cls606200)])
sort(InvertedClassMatrix[names(cls606200)], decreasing = TRUE)
head(sort(InvertedClassMatrix[names(cls606200)], decreasing = TRUE))
head(sort(InvertedClassMatrix[names(cls7032)], decreasing = TRUE))
InvertedClassMatrix[names(cls606200)]>3
InvertedClassMatrix[InvertedClassMatrix[names(cls606200)]>3]
length(InvertedClassMatrix[InvertedClassMatrix[names(cls606200)]>3])
length(InvertedClassMatrix[names(cls606200)&InvertedClassMatrix>3])
length(InvertedClassMatrix[names(cls606200)])
s<-InvertedClassMatrix[names(cls606200)]
s[s>3]
length(s[s>3])
s<-InvertedClassMatrix[names(cls7032)]
length(s[s>3])
table(s)
201+114+75
201+114+76
48+29+33+29+37+29
sum(s)
sum(table(s))
3258-2088-391-205
s<-InvertedClassMatrix[names(cls7032)]
length(s[s>3])
s<-InvertedClassMatrix[names(cls606200)]
length(s[s>3])
sum(table(s))
table(s)
108+52+23
20+16+12+16+11+9+18
2330-1776-183-102
2088/3258
391/3258
205/3258
570/3258
1776/2330
183/2330
102/2330
269/2330
# 1.Retrieve documents term from database
#***************************************
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/dbConnect.R")
# 2.Build Class Term Frequency Matrix
#*****************************************
#*****************************************
ClassFreqDF<-aggregate(freq~path+keyterm,data=clsTree,sum)
ClassFreq<-dcast(ClassFreqDF,path~keyterm,value.var="freq",fill=0)
rownames(ClassFreq)<-ClassFreq[,1]
ClassFreq <- ClassFreq[,-1]
# Convert back to matrix for computation
ClassFreqMatrix <- as.matrix(ClassFreq)
#*****************************************
# 3.Build Document Frequency Class Matrix
#*****************************************
# Get Unique Document ID with Class
DocumentClassDF<- unique(clsTree[,c("id","path")])
# Get total number of documents for each Class
ClassDocTabl<-as.numeric(table(DocumentClassDF$path))
re <- ClassFreqMatrix*1/ClassDocTabl
#*****************************************
# 3.Build Class Bonus Frequency Matrix
#*****************************************
# We count each class the term has frequency == 0
# Larger sums means the word is spreading through many class
# and it is not important, we can try to negate the score
# score = log(No.Classes/Number Of Classes contains w)
InvertedClassMatrix <- log(nrow(ClassFreqMatrix)/colSums(ClassFreqMatrix>0))
# Inverted Class matrix is a vector of keywords with its
# classbonus value
final<-t(re)*InvertedClassMatrix
dim(ClassFreqMatrix)
dim(re)
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/loadTestData.R")
#
dmelt_class<-melt(final)
names(dmelt_class) <- c("keyterm","Id","freq")
dmelt_tmp<- melt(tmp,id.vars = c("patId"))
names(dmelt_tmp) <- c("Id","keyterm","freq")
mdata <- rbind(dmelt_tmp,dmelt_class)
# Convert back to wide
wide_dat <- dcast(mdata,Id~keyterm,value.var = "freq",fill=0)
# Extract test doc and train doc
test <- wide_dat[1:nrow(tmp),]
train <- wide_dat[(nrow(tmp)+1):nrow(wide_dat),]
rownames(train)<-train[,c("Id")]
train<-train[,-1]
train_mat <- as.matrix(train)
selected_class<-c()
for(i in seq(1,nrow(test))){
# For each vector d, we compute the eucline distance with our training set
print(i)
tmat <- as.numeric(test[i,-1])
distance <- t(t(train_mat)-tmat)
# Take exponential of each column
distance <- apply(distance,2,function(x)x**2)
# Get squareroot of sum
selected_class <- c(selected_class,names(which.min(sqrt(rowSums(distance)))))
}
source('C:/Users/Administrator/OPAIRS/R-scripts/Method4.R')
table(selected_class)
source('C:/Users/Administrator/OPAIRS/R-scripts/Method4.R')
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/dbConnect.R")
#*****************************************
# 2.Build Class Term Frequency Matrix
#*****************************************
ClassFreqDF<-aggregate(freq~path+keyterm,data=clsTree,sum)
ClassFreq<-dcast(ClassFreqDF,path~keyterm,value.var="freq",fill=0)
rownames(ClassFreq)<-ClassFreq[,1]
ClassFreq <- ClassFreq[,-1]
# Convert back to matrix for computation
ClassFreqMatrix <- as.matrix(ClassFreq)
#*****************************************
# 3.Build Class Bonus Frequency Matrix
#*****************************************
# We count each class the term has frequency == 0
# Larger sums means the word is spreading through many class
# Inverted Class matrix is a vector of keywords with its
# classbonus value
#*****************************************
InvertedClassMatrix <- log(nrow(ClassFreqMatrix)/colSums(ClassFreqMatrix>0))
# score = log(No.Classes/Number Of Classes contains w)
#*****************************************
# Get Unique Document ID with Class
# Get total number of documents for each Class
DocumentClassDF<- unique(clsTree[,c("id","path")])
# 3.Build Document Frequency Class Matrix
# and it is not important, we can try to negate the score
re<-t(t(ClassFreqMatrix)*InvertedClassMatrix)
dim(re)
InvertedClassMatrix <- log(nrow(ClassFreqMatrix)/colSums(ClassFreqMatrix>0))
# Inverted Class matrix is a vector of keywords with its
# classbonus value
re<-t(t(ClassFreqMatrix)*InvertedClassMatrix)
#*****************************************
# 3.Build Document Frequency Class Matrix
#*****************************************
# Get Unique Document ID with Class
DocumentClassDF<- unique(clsTree[,c("id","path")])
# Get total number of documents for each Class
ClassDocTabl<-as.numeric(table(DocumentClassDF$path))
final <- t(re*1/ClassDocTabl)
dim(final)
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/loadTestData.R")
#
dmelt_class<-melt(final)
names(dmelt_class) <- c("keyterm","Id","freq")
dmelt_tmp<- melt(tmp,id.vars = c("patId"))
names(dmelt_tmp) <- c("Id","keyterm","freq")
mdata <- rbind(dmelt_tmp,dmelt_class)
# Convert back to wide
wide_dat <- dcast(mdata,Id~keyterm,value.var = "freq",fill=0)
# Extract test doc and train doc
test <- wide_dat[1:nrow(tmp),]
train <- wide_dat[(nrow(tmp)+1):nrow(wide_dat),]
rownames(train)<-train[,c("Id")]
train<-train[,-1]
train_mat <- as.matrix(train)
selected_class<-c()
for(i in seq(1,nrow(test))){
# For each vector d, we compute the eucline distance with our training set
print(i)
tmat <- as.numeric(test[i,-1])
distance <- t(t(train_mat)-tmat)
# Take exponential of each column
distance <- apply(distance,2,function(x)x**2)
# Get squareroot of sum
selected_class <- c(selected_class,names(which.min(sqrt(rowSums(distance)))))
print(tail(selected_class,1))
}
table(selected_class)
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/dbConnect.R")
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/dbConnect.R")
#*****************************************
# 2.Build Class Frequency Matrix
#*****************************************
# Create a data frame with 3 variables | classId | keyword | class frequency |
ClassFreqDF<-aggregate(freq~path+keyterm,data=clsTree,sum)
# Filter low frequency term if necessary
# Convert to wide format
# ClassFreqDF<- ClassFreqDF[ClassFreqDF$freq>100,]
ClassFreq<-dcast(ClassFreqDF,path~keyterm,value.var="freq",fill=0)
# Move class ID to rownames
rownames(ClassFreq)<-ClassFreq[,1]
ClassFreq <- ClassFreq[,-1]
# Build a Class Frequency Matrix
ClassFreqMatrix <- as.matrix(ClassFreq)
#*****************************************
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/loadTestData.R")
rownames(tmp)<-tmp$patId
tmp$patId <- NULL
subset <- clsTree[,c("id","path","keyterm")]
# For each keyterm, we find number of documents that has the term
# within each class
a <- subset
a$docCount <-1
a.agg<-aggregate(docCount~path+keyterm,data = a, sum)
a.dc <- dcast(a.agg, path~keyterm,value.var = "docCount",fill=0)
rownames(a.dc)<-a.dc[,1]
a.dc<-a.dc[,-1]
#*****************************************
# 2.Build Document Frequency Class Matrix
#*****************************************
# Get Unique Document ID with Class
DocumentClassDF<- unique(subset[,c("id","path")])
# Get total number of documents for each Class
ClassDocTabl<-table(DocumentClassDF$path)
a.dc$No.Docs <- as.numeric(ClassDocTabl)
# Convert mdata to matrix
TermClassMatrix <- as.matrix(a.dc)
InvertedTermClassMatrix <- log(TermClassMatrix[,ncol(TermClassMatrix)]/TermClassMatrix)
# For term with 0 frequency, Division will cause Inf
InvertedTermClassMatrix[InvertedTermClassMatrix==Inf]<-0
re <- t(InvertedTermClassMatrix)
dim(re)
re[1:3,1:3]
tail(re[1:3,1:3])
re[-nrow(re),1:3]
dim(re)
tail(nrow(re),1)
tail(rownames(re),1)
re <- re[-nrow(re),]
dim(re)
re[1:3,1:3]
dim(re)
final<-t(ClassFreqMatrix)*re
library("stringr")
keywords<-unique(rownames(final))
#*****************************************
# 5. Calculate Cosine Similarity
kw<-colnames(tmp)
#*****************************************
and<- intersect(kw,keywords)
# Calculate Class Length |c| by first double each element in cell
# If term is not visiable in either D or c, we can safely
# Calculating total frequency and taking square root
# Calculate cross product of D.c = D1.c1+D2.c2+...+Dn.cn
# ignore it
# The formular is s = (D.c)/(|docLen|*|clsLen|)
# After applying the power of 2 function:
# ---------------------------
#      | cls1 | cls2 | cls3 |
# w2   | 2    |  4   |  6   |
# w1   | 1    |  4   |  9   |
# After applying colSums, we have total frequency for each class
# w2   | 4    | 16   | 36   |
# cls1 = 5, cls2 = 20, cls3 = 45
# A. Compute the nominator: D.c
clsLen<-sqrt(colSums(apply(final,2,function(x)x**2)))
# final frame has the format:
qMatrix<-as.matrix(tmp[,and])
clsMatrix <- final[and,]
# w1   | 1    |  2   |  3   |
# qmatrix shape:
#     | w1 | w2 | w3 |
#      | cls1 | cls2 | cls3 |
# clsMatrix Shape:
#      | cls1 | cls2 | cls3 |
# w1   | 1    |  4   |  9   |
#---------------------
# ---------------------------
# d2  | 2  | 3  | 1  |
# d1  | 1  | 2  | 3  |
# w2   | 4    | 16   | 36   |
# After multiplication, each cell hold the dot product of a document with a list of class
nominator <- qMatrix %*% clsMatrix
# Calculate doc length for each document
# docLen shape:
#     | w1 | w2 | w3 |
#---------------------
# d1  | 1  | 2  | 3  |
# After calculating sums:
# d2  | 2  | 3  | 1  |
# d1 = 6, d2 = 6
# Each word is now a unit vector, we can calculate
# total frequency for docLen
docLen<-sqrt(rowSums(apply(tmp,2,function(x)x**2)))
t<-matrix(data = clsLen, nrow = length(clsLen), ncol=length(docLen), byrow=FALSE)
denominator <- t %*% diag(docLen)
rownames(denominator)<-names(clsLen)
colnames(denominator)<-names(docLen)
s<-nominator/t(denominator)
length(which(apply(s,1,function(x)max(x))==s[,"345173"],TRUE))
doc_test_pred<-apply(s,1,function(x) names(which.max(x)))
table(doc_test_pred)
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/dbConnect.R")
#*****************************************
# 2.Build Class Frequency Matrix
# Create a data frame with 3 variables | classId | keyword | class frequency |
ClassFreqDF<-aggregate(freq~path+keyterm,data=clsTree,sum)
#*****************************************
# Filter low frequency term if necessary
# Convert to wide format
# ClassFreqDF<- ClassFreqDF[ClassFreqDF$freq>100,]
source(file = "C:/Users/Administrator/OPAIRS/R-scripts/dbConnect.R")
